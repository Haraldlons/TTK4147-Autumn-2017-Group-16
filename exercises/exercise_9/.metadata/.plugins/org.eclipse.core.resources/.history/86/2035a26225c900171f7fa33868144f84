#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <fcntl.h>
#include <sys/dispatch.h>
#include <sys/mman.h>
#include <pthread.h>

int set_priority(int priority) {
	int policy;
	struct sched_param param;
	// check priority in range
	if (priority < 1 || priority > 63) return -1;
	// set priority
	pthread_getschedparam(pthread_self(), &policy, &param);
	param.sched_priority = priority;
	return pthread_setschedparam(pthread_self(), policy, &param);
}

int get_priority(){
	int policy;
	struct sched_param param;
	// get priority
	pthread_getschedparam(pthread_self(), &policy, &param);
	return param.sched_curpriority;
}

struct pid_data{
	pthread_mutex_t pid_mutex;
	pid_t pid;
};

void sendMsgH(pid_t* pid){
	set_priority(12);
	int channelId = ConnectAttach(0, *pid, 1, 0 ,0);
	int* send = malloc(sizeof(int));
	*send = 10;
	int* buff = malloc(sizeof(int));
	int status = MsgSend(channelId, send, sizeof(int), buff, sizeof(int));
	printf("status: %i -- Sent: %i -- Received: %i \n", status, 10, *buff);
	ConnectDetach(channelId);
}
void sendMsgL(pid_t* pid){
	set_priority(8);
	int channelId = ConnectAttach(0, *pid, 1, 0 ,0);
	int* send = malloc(sizeof(int));
	*send = 10;
	int* buff = malloc(sizeof(int));
	int status = MsgSend(channelId, send, sizeof(int), buff, sizeof(int));
	printf("status: %i -- Sent: %i -- Received: %i \n", status, 10, *buff);
	ConnectDetach(channelId);
}


int main(int argc, char *argv[]) {
	int file_desc = shm_open("/sharedpid", O_RDWR, S_IRWXU);
	struct pid_data* dat = (struct pid_data*) mmap(0, sizeof(struct pid_data), PROT_READ|PROT_WRITE, MAP_SHARED, file_desc, 0);


	pthread_mutex_lock(&(dat->pid_mutex));
	pid_t pid= dat->pid;
	pthread_mutex_unlock(&(dat->pid_mutex));

	set_priority(30);

	pthread_t send1, send2, send3, send4;
	pthread_create(&send1, NULL, &sendMsgH, &pid);
	pthread_create(&send2, NULL, &sendMsgH, &pid);
	pthread_create(&send3, NULL, &sendMsgL, &pid);
	pthread_create(&send4, NULL, &sendMsgL, &pid);
	while(1){
		continue;
	}
	return EXIT_SUCCESS;
}
