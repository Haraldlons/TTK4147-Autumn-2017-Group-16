#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <fcntl.h>
#include <sys/dispatch.h>
#include <sys/mman.h>
#include <sys/neutrino.h>
#include <pthread.h>

int set_priority(int priority) {
	int policy;
	struct sched_param param;
	// check priority in range
	if (priority < 1 || priority > 63) return -1;
	// set priority
	pthread_getschedparam(pthread_self(), &policy, &param);
	param.sched_priority = priority;
	return pthread_setschedparam(pthread_self(), policy, &param);
}

int get_priority(){
	int policy;
	struct sched_param param;
	// get priority
	pthread_getschedparam(pthread_self(), &policy, &param);
	return param.sched_curpriority;
}


struct pid_data{
	pthread_mutex_t pid_mutex;
	pid_t pid;
};

int main(int argc, char *argv[]) {
	struct pid_data p;
	p.pid = getpid();
	int file_desc = shm_open("/sharedpid", O_RDWR|O_CREAT, S_IRWXU);
	ftruncate(file_desc, sizeof(struct pid_data));
	struct pid_data* dat = (struct pid_data*) mmap(0, sizeof(struct pid_data), PROT_READ|PROT_WRITE, MAP_SHARED, file_desc, 0);
	dat->pid = getpid();

	pthread_mutexattr_t attr;
	pthread_mutexattr_init(&attr);
	pthread_mutexattr_setpshared(&attr, PTHREAD_PROCESS_SHARED);
	pthread_mutex_init(&dat->pid_mutex, &attr);
	printf("%i \n", dat->pid);
	printf("%i \n", p.pid);

	int* buff = malloc(sizeof(int));
	int* send = malloc(sizeof(int));

	set_priority(10);
	int channelId = ChannelCreate(_NTO_CHF_FIXED_PRIORITY);
	int recMsgId = 0;
	struct _msg_info* msgInfo = malloc(sizeof(struct _msg_info));
	while(1){
		printf("Before rec priority is: %i\n", get_priority());
		recMsgId = MsgReceive(channelId, buff, sizeof(int), msgInfo);
		printf("After rec priority is: %i\n", get_priority());
		printf("pid:%i -- tid:%i\n", msgInfo->pid, msgInfo->tid);
		*send = *buff + 2;
		MsgReply(recMsgId, 0, send, sizeof(int));
		printf("After reply priority is: %i\n", get_priority());
	}
	return 0;
}
